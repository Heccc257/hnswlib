--------------------------------------------------------------------------------
Profile data file '../bigann.callgrind' (creator: callgrind-3.15.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 12162654644
Trigger: Program termination
Profiled target:  ./experiment /root/datasets/bigann/learn.100M.u8bin /root/datasets/bigann/query.public.10K.u8bin bigann 10000 (PID 227644, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir              
--------------------------------------------------------------------------------
118,647,661,069  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir              file:function
--------------------------------------------------------------------------------
60,548,675,208  /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) [/root/hnswlib/build/experiment]
18,728,085,639  /root/hnswlib/hnswlib/hnswalg.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const [/root/hnswlib/build/experiment]
11,392,537,175  /usr/include/c++/9/bits/stl_heap.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst> >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst>) [/root/hnswlib/build/experiment]
 4,034,886,109  /usr/include/c++/9/bits/stl_heap.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const
 2,980,223,665  /usr/include/c++/9/bits/stl_iterator.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst> >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst>)
 2,499,556,744  /usr/lib/gcc/x86_64-linux-gnu/9/include/xmmintrin.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const
 2,450,111,666  /usr/include/c++/9/bits/stl_pair.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst> >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst>)
 1,739,236,508  /usr/include/c++/9/bits/predefined_ops.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst> >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst>)
 1,417,453,584  /usr/include/c++/9/bits/stl_iterator.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const
 1,408,986,436  /usr/include/c++/9/bits/stl_pair.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const
 1,280,872,004  /usr/include/c++/9/bits/stl_vector.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const
 1,122,209,447  /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int) [/root/hnswlib/build/experiment]
 1,003,146,395  /usr/include/c++/9/bits/vector.tcc:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const
   682,829,808  /build/glibc-SzIz7B/glibc-2.31/malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   653,600,058  /usr/include/c++/9/bits/predefined_ops.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const
   567,400,568  /usr/include/c++/9/bits/stl_heap.h:float test_approx<int>(DATALOADER::DataLoader*, GroundTruth::GT_Loader*, hnswlib::HierarchicalNSW<int>*, unsigned long)
   555,393,168  /usr/include/c++/9/bits/stl_uninitialized.h:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&&, int&)
   454,881,562  /root/hnswlib/hnswlib/hnswalg.h:float test_approx<int>(DATALOADER::DataLoader*, GroundTruth::GT_Loader*, hnswlib::HierarchicalNSW<int>*, unsigned long)
   451,047,356  /build/glibc-SzIz7B/glibc-2.31/malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   327,280,000  /usr/include/c++/9/bits/stl_uninitialized.h:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int&, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&, int&)
   228,128,006  /build/glibc-SzIz7B/glibc-2.31/malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   191,020,325  /usr/include/c++/9/bits/stl_pair.h:float test_approx<int>(DATALOADER::DataLoader*, GroundTruth::GT_Loader*, hnswlib::HierarchicalNSW<int>*, unsigned long)
   176,307,776  /usr/include/c++/9/bits/alloc_traits.h:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&&, int&)
   167,161,695  /usr/include/c++/9/bits/stl_heap.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int)
   164,608,432  /root/hnswlib/experiment/calc_group_truth.h:float test_approx<int>(DATALOADER::DataLoader*, GroundTruth::GT_Loader*, hnswlib::HierarchicalNSW<int>*, unsigned long)
   159,754,481  /usr/include/c++/9/bits/stl_heap.h:hnswlib::HierarchicalNSW<int>::getNeighborsByHeuristic2(std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>&, unsigned long)
   149,107,943  /usr/include/c++/9/bits/stl_heap.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, long, std::pair<int, unsigned long>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned long> > > >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, long, long, std::pair<int, unsigned long>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned long> > >) [/root/hnswlib/build/experiment]
   133,736,259  /usr/lib/gcc/x86_64-linux-gnu/9/include/xmmintrin.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int)
   130,627,365  /usr/include/c++/9/bits/stl_heap.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned int> > > >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned int> > >) [/root/hnswlib/build/experiment]
   129,458,385  /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::getNeighborsByHeuristic2(std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>&, unsigned long) [/root/hnswlib/build/experiment]
   125,395,198  /usr/include/c++/9/bits/vector.tcc:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int)
   119,488,380  ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   111,985,851  /usr/include/c++/9/bits/stl_pair.h:hnswlib::HierarchicalNSW<int>::getNeighborsByHeuristic2(std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>&, unsigned long)
   101,660,000  /usr/include/c++/9/bits/alloc_traits.h:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int&, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&, int&)
    94,350,000  /usr/include/c++/9/bits/vector.tcc:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&) [/root/hnswlib/build/experiment]
    86,916,959  /usr/include/c++/9/bits/stl_pair.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int)
    79,285,876  /usr/include/c++/9/bits/stl_pair.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned int> > > >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned int> > >)
    75,850,142  /usr/include/c++/9/bits/stl_iterator.h:float test_approx<int>(DATALOADER::DataLoader*, GroundTruth::GT_Loader*, hnswlib::HierarchicalNSW<int>*, unsigned long)
    72,933,593  /build/glibc-SzIz7B/glibc-2.31/malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    63,527,616  /usr/include/c++/9/bits/vector.tcc:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&&, int&) [/root/hnswlib/build/experiment]
    60,356,991  /usr/include/c++/9/bits/stl_queue.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int)
    59,655,649  /usr/include/c++/9/bits/stl_iterator.h:hnswlib::HierarchicalNSW<int>::getNeighborsByHeuristic2(std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>&, unsigned long)
    59,085,720  /usr/include/c++/9/bits/stl_vector.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int)
    56,241,181  /usr/include/c++/9/bits/stl_pair.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, long, std::pair<int, unsigned long>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned long> > > >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, long, long, std::pair<int, unsigned long>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned long> > >)
    55,586,664  /usr/include/c++/9/bits/stl_vector.h:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&&, int&)
    53,520,000  /usr/include/c++/9/bits/vector.tcc:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int&, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&, int&) [/root/hnswlib/build/experiment]
    48,100,000  /usr/include/c++/9/bits/stl_uninitialized.h:void std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > >::_M_realloc_insert<std::pair<int, unsigned long> >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, std::pair<int, unsigned long>&&)
    47,141,574  /usr/include/c++/9/bits/stl_uninitialized.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int)
    46,830,000  /usr/include/c++/9/bits/stl_vector.h:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int&, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&, int&)
    46,621,554  /build/glibc-SzIz7B/glibc-2.31/time/../sysdeps/unix/sysv/linux/clock_gettime.c:clock_gettime@@GLIBC_2.17 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    44,769,171  /usr/include/c++/9/bits/stl_iterator.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, long, std::pair<int, unsigned long>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned long> > > >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, long, long, std::pair<int, unsigned long>, __gnu_cxx::__ops::_Iter_comp_iter<std::less<std::pair<int, unsigned long> > >)
    42,550,000  /usr/include/c++/9/bits/vector.tcc:void std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > >::_M_realloc_insert<std::pair<int, unsigned long> >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned long>*, std::vector<std::pair<int, unsigned long>, std::allocator<std::pair<int, unsigned long> > > >, std::pair<int, unsigned long>&&) [/root/hnswlib/build/experiment]

--------------------------------------------------------------------------------
-- Auto-annotated source: /root/hnswlib/hnswlib/space_l2.h
--------------------------------------------------------------------------------
Ir             

-- line 248 ----------------------------------------
             .      void *get_dist_func_param() {
             .          return &dim_;
             .      }
             .  
             .      ~L2Space() {}
             .  };
             .  
             .  static int
   360,408,781  L2SqrI4x(const void *__restrict pVect1, const void *__restrict pVect2, const void *__restrict qty_ptr) {
   360,408,781      size_t qty = *((size_t *) qty_ptr);
             .      int res = 0;
             .      unsigned char *a = (unsigned char *) pVect1;
             .      unsigned char *b = (unsigned char *) pVect2;
             .  
             .      qty = qty >> 2;
15,497,577,583      for (size_t i = 0; i < qty; i++) {
43,969,871,282          res += ((*a) - (*b)) * ((*a) - (*b));
             .          a++;
             .          b++;
             .          res += ((*a) - (*b)) * ((*a) - (*b));
             .          a++;
             .          b++;
             .          res += ((*a) - (*b)) * ((*a) - (*b));
             .          a++;
             .          b++;
             .          res += ((*a) - (*b)) * ((*a) - (*b));
             .          a++;
             .          b++;
             .      }
             .      return (res);
   360,408,781  }
             .  
             .  static int L2SqrI(const void* __restrict pVect1, const void* __restrict pVect2, const void* __restrict qty_ptr) {
             .      size_t qty = *((size_t*)qty_ptr);
             .      int res = 0;
             .      unsigned char* a = (unsigned char*)pVect1;
             .      unsigned char* b = (unsigned char*)pVect2;
             .  
             .      for (size_t i = 0; i < qty; i++) {
-- line 286 ----------------------------------------
-- line 292 ----------------------------------------
             .  }
             .  
             .  class L2SpaceI : public SpaceInterface<int> {
             .      DISTFUNC<int> fstdistfunc_;
             .      size_t data_size_;
             .      size_t dim_;
             .  
             .   public:
             3      L2SpaceI(size_t dim) {
             .          if (dim % 4 == 0) {
             .              fstdistfunc_ = L2SqrI4x;
             .          } else {
             4              fstdistfunc_ = L2SqrI;
             .          }
             .          dim_ = dim;
             4          data_size_ = dim * sizeof(unsigned char);
             .      }
             .  
             .      size_t get_data_size() {
             1          return data_size_;
             .      }
             .  
             .      DISTFUNC<int> get_dist_func() {
             1          return fstdistfunc_;
             .      }
             .  
             .      void *get_dist_func_param() {
             1          return &dim_;
             .      }
             .  
             2      ~L2SpaceI() {}
            92  => ???:0x000000000010b750 (1x)
             .  };
             .  }  // namespace hnswlib

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir            

-- line 87 ----------------------------------------
            .  
            .        struct _Vector_impl_data
            .        {
            .  	pointer _M_start;
            .  	pointer _M_finish;
            .  	pointer _M_end_of_storage;
            .  
            .  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    4,631,262  	: _M_start(), _M_finish(), _M_end_of_storage()
            .  	{ }
            .  
            .  #if __cplusplus >= 201103L
            .  	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
            .  	: _M_start(__x._M_start), _M_finish(__x._M_finish),
            .  	  _M_end_of_storage(__x._M_end_of_storage)
            .  	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
            .  #endif
            .  
            .  	void
            .  	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
            .  	{
      370,000  	  _M_start = __x._M_start;
      740,000  	  _M_finish = __x._M_finish;
            .  	  _M_end_of_storage = __x._M_end_of_storage;
            .  	}
            .  
            .  	void
            .  	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
            .  	{
            .  	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
            .  	  // information used by TBAA.
-- line 117 ----------------------------------------
-- line 335 ----------------------------------------
            .  
            .      public:
            .        _Vector_impl _M_impl;
            .  
            .        pointer
            .        _M_allocate(size_t __n)
            .        {
            .  	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
   53,361,278  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
            .        }
            .  
            .        void
            .        _M_deallocate(pointer __p, size_t __n)
            .        {
            .  	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
   20,686,686  	if (__p)
            .  	  _Tr::deallocate(_M_impl, __p, __n);
            .        }
            .  
            .      protected:
            .        void
            .        _M_create_storage(size_t __n)
            .        {
            3  	this->_M_impl._M_start = this->_M_allocate(__n);
            .  	this->_M_impl._M_finish = this->_M_impl._M_start;
           10  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
            .        }
            .      };
            .  
            .    /**
            .     *  @brief A standard container which offers fixed time access to
            .     *  individual elements in any order.
            .     *
            .     *  @ingroup sequences
-- line 368 ----------------------------------------
-- line 544 ----------------------------------------
            .         *  @a __x  will not be copied
            .         *  (i.e. capacity() == size() in the new %vector).
            .         *
            .         *  The newly-created %vector uses a copy of the allocator object used
            .         *  by @a __x (unless the allocator traits dictate a different object).
            .         */
            .        vector(const vector& __x)
            .        : _Base(__x.size(),
      740,000  	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
            .        {
            .  	this->_M_impl._M_finish =
            .  	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
            .  				      this->_M_impl._M_start,
            .  				      _M_get_Tp_allocator());
            .        }
            .  
            .  #if __cplusplus >= 201103L
-- line 560 ----------------------------------------
-- line 669 ----------------------------------------
            .        /**
            .         *  The dtor only erases the elements, and note that if the
            .         *  elements themselves are pointers, the pointed-to memory is
            .         *  not touched in any way.  Managing the pointer is the user's
            .         *  responsibility.
            .         */
            .        ~vector() _GLIBCXX_NOEXCEPT
            .        {
    1,131,349  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
            .  		      _M_get_Tp_allocator());
            .  	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
            .        }
            .  
            .        /**
            .         *  @brief  %Vector assignment operator.
            .         *  @param  __x  A %vector of identical element and allocator types.
            .         *
-- line 685 ----------------------------------------
-- line 908 ----------------------------------------
            .        crend() const noexcept
            .        { return const_reverse_iterator(begin()); }
            .  #endif
            .  
            .        // [23.2.4.2] capacity
            .        /**  Returns the number of elements in the %vector.  */
            .        size_type
            .        size() const _GLIBCXX_NOEXCEPT
1,168,998,573        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
            .  
            .        /**  Returns the size() of the largest possible %vector.  */
            .        size_type
            .        max_size() const _GLIBCXX_NOEXCEPT
            .        { return _S_max_size(_M_get_Tp_allocator()); }
            .  
            .  #if __cplusplus >= 201103L
            .        /**
-- line 924 ----------------------------------------
-- line 989 ----------------------------------------
            .  
            .        /**
            .         *  Returns the total number of elements that the %vector can
            .         *  hold before needing to allocate more memory.
            .         */
            .        size_type
            .        capacity() const _GLIBCXX_NOEXCEPT
            .        { return size_type(this->_M_impl._M_end_of_storage
       42,692  			 - this->_M_impl._M_start); }
            .  
            .        /**
            .         *  Returns true if the %vector is empty.  (Thus begin() would
            .         *  equal end().)
            .         */
            .        _GLIBCXX_NODISCARD bool
            .        empty() const _GLIBCXX_NOEXCEPT
   41,323,720        { return begin() == end(); }
            .  
            .        /**
            .         *  @brief  Attempt to preallocate enough memory for specified number of
            .         *          elements.
            .         *  @param  __n  Number of elements required.
            .         *  @throw  std::length_error  If @a n exceeds @c max_size().
            .         *
            .         *  This function attempts to reserve enough memory for the
-- line 1013 ----------------------------------------
-- line 1032 ----------------------------------------
            .         *  @return  Read/write reference to data.
            .         *
            .         *  This operator allows for easy, array-style, data access.
            .         *  Note that data access with this operator is unchecked and
            .         *  out_of_range lookups are not defined. (For checked lookups
            .         *  see at().)
            .         */
            .        reference
      261,196        operator[](size_type __n) _GLIBCXX_NOEXCEPT
            .        {
            .  	__glibcxx_requires_subscript(__n);
    6,904,809  	return *(this->_M_impl._M_start + __n);
            .        }
            .  
            .        /**
            .         *  @brief  Subscript access to the data contained in the %vector.
            .         *  @param __n The index of the element for which data should be
            .         *  accessed.
            .         *  @return  Read-only (constant) reference to data.
            .         *
-- line 1051 ----------------------------------------
-- line 1178 ----------------------------------------
            .         *  element at the end of the %vector and assigns the given data
            .         *  to it.  Due to the nature of a %vector this operation can be
            .         *  done in constant time if the %vector has preallocated space
            .         *  available.
            .         */
            .        void
            .        push_back(const value_type& __x)
            .        {
      845,398  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
            .  	  {
            .  	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
      130,598  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
            .  				     __x);
    1,136,300  	    ++this->_M_impl._M_finish;
            .  	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
            .  	  }
            .  	else
      379,150  	  _M_realloc_insert(end(), __x);
   14,755,188  => /usr/include/c++/9/bits/vector.tcc:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<std::pair<int, unsigned int> const&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, std::pair<int, unsigned int> const&) (67,565x)
            .        }
            .  
            .  #if __cplusplus >= 201103L
            .        void
            .        push_back(value_type&& __x)
   11,100,000        { emplace_back(std::move(__x)); }
  418,100,000  => /usr/include/c++/9/bits/vector.tcc:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&) (3,700,000x)
            .  
            .        template<typename... _Args>
            .  #if __cplusplus > 201402L
            .  	reference
            .  #else
            .  	void
            .  #endif
            .  	emplace_back(_Args&&... __args);
-- line 1209 ----------------------------------------
-- line 1217 ----------------------------------------
            .         *  Note that no data is returned, and if the last element's
            .         *  data is needed, it should be retrieved before pop_back() is
            .         *  called.
            .         */
            .        void
            .        pop_back() _GLIBCXX_NOEXCEPT
            .        {
            .  	__glibcxx_requires_nonempty();
  156,169,761  	--this->_M_impl._M_finish;
            .  	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
            .  	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
            .        }
            .  
            .  #if __cplusplus >= 201103L
            .        /**
            .         *  @brief  Inserts an object in %vector before specified iterator.
            .         *  @param  __position  A const_iterator into the %vector.
-- line 1233 ----------------------------------------
-- line 1594 ----------------------------------------
            .  					_M_get_Tp_allocator());
            .        }
            .  
            .  #if __cplusplus >= 201103L
            .        // Called by the vector(n) constructor.
            .        void
            .        _M_default_initialize(size_type __n)
            .        {
            4  	this->_M_impl._M_finish =
            .  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
            .  					   _M_get_Tp_allocator());
            .        }
            .  #endif
            .  
            .        // Internal assign functions follow.  The *_aux functions do the actual
            .        // assignment work for the range versions.
            .  
-- line 1610 ----------------------------------------
-- line 1747 ----------------------------------------
            .        _M_emplace_aux(const_iterator __position, value_type&& __v)
            .        { return _M_insert_rval(__position, std::move(__v)); }
            .  #endif
            .  
            .        // Called by _M_fill_insert, _M_insert_aux etc.
            .        size_type
            .        _M_check_len(size_type __n, const char* __s) const
            .        {
   53,390,088  	if (max_size() - size() < __n)
    6,380,145  	  __throw_length_error(__N(__s));
            .  
    8,189,134  	const size_type __len = size() + (std::max)(size(), __n);
   16,378,268  	return (__len < size() || __len > max_size()) ? max_size() : __len;
            .        }
            .  
            .        // Called by constructors to check initial size.
            .        static size_type
            .        _S_check_init_len(size_type __n, const allocator_type& __a)
            .        {
            3  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
            .  	  __throw_length_error(
            .  	      __N("cannot create std::vector larger than max_size()"));
            .  	return __n;
            .        }
            .  
            .        static size_type
            .        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
            .        {
-- line 1774 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/vector.tcc
--------------------------------------------------------------------------------
Ir          

-- line 58 ----------------------------------------
          .  
          .  namespace std _GLIBCXX_VISIBILITY(default)
          .  {
          .  _GLIBCXX_BEGIN_NAMESPACE_VERSION
          .  _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
          .  
          .    template<typename _Tp, typename _Alloc>
          .      void
     64,038      vector<_Tp, _Alloc>::
          .      reserve(size_type __n)
          .      {
     32,019        if (__n > this->max_size())
          .  	__throw_length_error(__N("vector::reserve"));
     32,019        if (this->capacity() < __n)
          .  	{
          .  	  const size_type __old_size = size();
          .  	  pointer __tmp;
          .  #if __cplusplus >= 201103L
          .  	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
          .  	    {
          .  	      __tmp = this->_M_allocate(__n);
          .  	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
-- line 79 ----------------------------------------
-- line 87 ----------------------------------------
          .  		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
          .  	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
          .  			    _M_get_Tp_allocator());
          .  	    }
          .  	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
          .  	  _M_deallocate(this->_M_impl._M_start,
          .  			this->_M_impl._M_end_of_storage
          .  			- this->_M_impl._M_start);
     10,673  	  this->_M_impl._M_start = __tmp;
     21,346  	  this->_M_impl._M_finish = __tmp + __old_size;
     21,346  	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
          .  	}
     64,038      }
          .  
          .  #if __cplusplus >= 201103L
          .    template<typename _Tp, typename _Alloc>
          .      template<typename... _Args>
          .  #if __cplusplus > 201402L
          .        typename vector<_Tp, _Alloc>::reference
          .  #else
          .        void
          .  #endif
 33,300,000        vector<_Tp, _Alloc>::
          .        emplace_back(_Args&&... __args)
          .        {
509,519,440  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
          .  	  {
          .  	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
221,733,982  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          .  				     std::forward<_Args>(__args)...);
397,890,673  	    ++this->_M_impl._M_finish;
          .  	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
          .  	  }
          .  	else
 53,445,922  	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
1,342,740,815  => /usr/include/c++/9/bits/vector.tcc:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&&, int&) (2,646,984x)
927,350,584  => /usr/include/c++/9/bits/vector.tcc:void std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >::_M_realloc_insert<int&, int&>(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, int&, int&) (2,230,000x)
          .  #if __cplusplus > 201402L
  1,850,000  	return back();
          .  #endif
 33,300,000        }
          .  #endif
          .  
          .    template<typename _Tp, typename _Alloc>
          .      typename vector<_Tp, _Alloc>::iterator
          .      vector<_Tp, _Alloc>::
          .  #if __cplusplus >= 201103L
          .      insert(const_iterator __position, const value_type& __x)
          .  #else
-- line 133 ----------------------------------------
-- line 418 ----------------------------------------
          .        *__position = std::forward<_Arg>(__arg);
          .  #endif
          .      }
          .  
          .  #if __cplusplus >= 201103L
          .    template<typename _Tp, typename _Alloc>
          .      template<typename... _Args>
          .        void
 61,083,432        vector<_Tp, _Alloc>::
          .        _M_realloc_insert(iterator __position, _Args&&... __args)
          .  #else
          .    template<typename _Tp, typename _Alloc>
          .      void
          .      vector<_Tp, _Alloc>::
          .      _M_realloc_insert(iterator __position, const _Tp& __x)
          .  #endif
          .      {
-- line 434 ----------------------------------------
-- line 441 ----------------------------------------
          .        pointer __new_finish(__new_start);
          .        __try
          .  	{
          .  	  // The order of the three operations is dictated by the C++11
          .  	  // case, where the moves could alter a new element belonging
          .  	  // to the existing vector.  This is an issue only for callers
          .  	  // taking the element by lvalue ref (see last bullet of C++11
          .  	  // [res.on.arguments]).
 15,640,855  	  _Alloc_traits::construct(this->_M_impl,
          .  				   __new_start + __elems_before,
          .  #if __cplusplus >= 201103L
          .  				   std::forward<_Args>(__args)...);
          .  #else
          .  				   __x);
          .  #endif
          .  	  __new_finish = pointer();
          .  
          .  #if __cplusplus >= 201103L
          .  	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
          .  	    {
          .  	      __new_finish = _S_relocate(__old_start, __position.base(),
          .  					 __new_start, _M_get_Tp_allocator());
          .  
      3,148  	      ++__new_finish;
          .  
          .  	      __new_finish = _S_relocate(__position.base(), __old_finish,
          .  					 __new_finish, _M_get_Tp_allocator());
          .  	    }
          .  	  else
          .  #endif
          .  	    {
          .  	      __new_finish
-- line 472 ----------------------------------------
-- line 494 ----------------------------------------
          .  	}
          .  #if __cplusplus >= 201103L
          .        if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
          .  #endif
          .  	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
          .        _GLIBCXX_ASAN_ANNOTATE_REINIT;
          .        _M_deallocate(__old_start,
          .  		    this->_M_impl._M_end_of_storage - __old_start);
 39,573,759        this->_M_impl._M_start = __new_start;
      3,148        this->_M_impl._M_finish = __new_finish;
 11,129,562        this->_M_impl._M_end_of_storage = __new_start + __len;
 54,356,448      }
          .  
          .    template<typename _Tp, typename _Alloc>
          .      void
          .      vector<_Tp, _Alloc>::
          .      _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
          .      {
          .        if (__n != 0)
          .  	{
-- line 513 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
Ir          

-- line 74 ----------------------------------------
          .        template<typename _InputIterator, typename _ForwardIterator>
          .          static _ForwardIterator
          .          __uninit_copy(_InputIterator __first, _InputIterator __last,
          .  		      _ForwardIterator __result)
          .          {
          .  	  _ForwardIterator __cur = __result;
          .  	  __try
          .  	    {
 28,120,000  	      for (; __first != __last; ++__first, (void)++__cur)
          .  		std::_Construct(std::__addressof(*__cur), *__first);
          .  	      return __cur;
          .  	    }
          .  	  __catch(...)
          .  	    {
          .  	      std::_Destroy(__result, __cur);
          .  	      __throw_exception_again;
          .  	    }
-- line 90 ----------------------------------------
-- line 536 ----------------------------------------
          .      {
          .        template<typename _ForwardIterator, typename _Size>
          .          static _ForwardIterator
          .          __uninit_default_n(_ForwardIterator __first, _Size __n)
          .          {
          .  	  _ForwardIterator __cur = __first;
          .  	  __try
          .  	    {
          3  	      for (; __n > 0; --__n, (void) ++__cur)
  3,021,478  => ???:0x000000000010b610 (2x)
          .  		std::_Construct(std::__addressof(*__cur));
          .  	      return __cur;
          .  	    }
          .  	  __catch(...)
          .  	    {
          .  	      std::_Destroy(__first, __cur);
          .  	      __throw_exception_again;
          .  	    }
-- line 552 ----------------------------------------
-- line 916 ----------------------------------------
          .    // This class may be specialized for specific types.
          .    // Also known as is_trivially_relocatable.
          .    template<typename _Tp, typename = void>
          .      struct __is_bitwise_relocatable
          .      : is_trivial<_Tp> { };
          .  
          .    template <typename _Tp, typename _Up>
          .      inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
  3,700,014      __relocate_a_1(_Tp* __first, _Tp* __last,
          .  		   _Tp* __result, allocator<_Up>&) noexcept
          .      {
          .        ptrdiff_t __count = __last - __first;
  3,721,380        if (__count > 0)
  5,920,024  	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 21,830,000  => ???:0x000000000010b8e0 (1,480,000x)
          .        return __result + __count;
          .      }
          .  
          .    template <typename _InputIterator, typename _ForwardIterator,
          .  	    typename _Allocator>
          .      inline _ForwardIterator
          .      __relocate_a_1(_InputIterator __first, _InputIterator __last,
          .  		   _ForwardIterator __result, _Allocator& __alloc)
-- line 937 ----------------------------------------
-- line 940 ----------------------------------------
          .  					       __alloc)))
          .      {
          .        typedef typename iterator_traits<_InputIterator>::value_type
          .  	_ValueType;
          .        typedef typename iterator_traits<_ForwardIterator>::value_type
          .  	_ValueType2;
          .        static_assert(std::is_same<_ValueType, _ValueType2>::value,
          .  	  "relocation is only possible for values of the same type");
  7,484,249        _ForwardIterator __cur = __result;
998,163,051        for (; __first != __last; ++__first, (void)++__cur)
          .  	std::__relocate_object_a(std::__addressof(*__cur),
          .  				 std::__addressof(*__first), __alloc);
          .        return __cur;
          .      }
          .  
          .    template <typename _InputIterator, typename _ForwardIterator,
          .  	    typename _Allocator>
          .      inline _ForwardIterator
-- line 957 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /root/hnswlib/hnswlib/hnswalg.h
--------------------------------------------------------------------------------
Ir            

-- line 83 ----------------------------------------
            .          bool nmslib = false,
            .          size_t max_elements = 0,
            .          bool allow_replace_deleted = false)
            .          : allow_replace_deleted_(allow_replace_deleted) {
            .          loadIndex(location, s, max_elements);
            .      }
            .  
            .  
           16      HierarchicalNSW(
            .          SpaceInterface<dist_t> *s,
            .          size_t max_elements,
            .          size_t M = 16,
            .          size_t ef_construction = 200,
            .          size_t random_seed = 100,
            .          bool allow_replace_deleted = false)
            .          : label_op_locks_(MAX_LABEL_OPERATION_LOCKS),
            .              link_list_locks_(max_elements),
            .              element_levels_(max_elements),
           22              allow_replace_deleted_(allow_replace_deleted) {
            1          max_elements_ = max_elements;
            .          num_deleted_ = 0;
            5          data_size_ = s->get_data_size();
            4          fstdistfunc_ = s->get_dist_func();
            4          dist_func_param_ = s->get_dist_func_param();
            3          if ( M <= 10000 ) {
            3              M_ = M;
            .          } else {
            .              HNSWERR << "warning: M parameter exceeds 10000 which may lead to adverse effects." << std::endl;
            .              HNSWERR << "         Cap to 10000 will be applied for the rest of the processing." << std::endl;
            .              M_ = 10000;
            .          }
            3          maxM_ = M_;
            .          maxM0_ = M_ * 2;
            4          ef_construction_ = std::max(ef_construction, M_);
            1          ef_ = 10;
            .  
            .          level_generator_.seed(random_seed);
            2          update_probability_generator_.seed(random_seed + 1);
            .  
            3          size_links_level0_ = maxM0_ * sizeof(tableint) + sizeof(linklistsizeint);
            6          size_data_per_element_ = size_links_level0_ + data_size_ + sizeof(labeltype);
            .          offsetData_ = size_links_level0_;
            1          label_offset_ = size_links_level0_ + data_size_;
            1          offsetLevel0_ = 0;
            .  
            3          data_level0_memory_ = (char *) malloc(max_elements_ * size_data_per_element_);
          273  => ???:0x000000000010b810 (1x)
            2          if (data_level0_memory_ == nullptr)
            .              throw std::runtime_error("Not enough memory");
            .  
            .          cur_element_count = 0;
            .  
            3          visited_list_pool_ = std::unique_ptr<VisitedListPool>(new VisitedListPool(1, max_elements));
          199  => ???:0x000000000010b730 (1x)
            .  
            .          // initializations for special treatment of the first node
            1          enterpoint_node_ = -1;
            1          maxlevel_ = -1;
            .  
            4          linkLists_ = (char **) malloc(sizeof(void *) * max_elements_);
          194  => ???:0x000000000010b810 (1x)
            2          if (linkLists_ == nullptr)
            .              throw std::runtime_error("Not enough memory: HierarchicalNSW failed to allocate linklists");
            3          size_links_per_element_ = maxM_ * sizeof(tableint) + sizeof(linklistsizeint);
            9          mult_ = 1 / log(1.0 * M_);
           56  => ???:0x000000000010b6a0 (1x)
            1          revSize_ = 1.0 / mult_;
            8      }
            .  
            .  
            8      ~HierarchicalNSW() {
            .          clear();
           14      }
    2,049,201  => /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::~HierarchicalNSW() (1x)
           92  => ???:0x000000000010b750 (1x)
            .  
            .      void clear() {
            2          free(data_level0_memory_);
           73  => ???:0x000000000010b7b0 (1x)
            2          data_level0_memory_ = nullptr;
       40,004          for (tableint i = 0; i < cur_element_count; i++) {
       40,000              if (element_levels_[i] > 0)
        1,935                  free(linkLists_[i]);
       67,489  => ???:0x000000000010b7b0 (645x)
            .          }
            2          free(linkLists_);
       21,677  => ???:0x000000000010b7b0 (1x)
            1          linkLists_ = nullptr;
            .          cur_element_count = 0;
            .          visited_list_pool_.reset(nullptr);
            .      }
            .  
            .  
            .      struct CompareByFirst {
            .          constexpr bool operator()(std::pair<dist_t, tableint> const& a,
            .              std::pair<dist_t, tableint> const& b) const noexcept {
            .              return a.first < b.first;
            .          }
            .      };
            .  
            .  
            .      void setEf(size_t ef) {
           37          ef_ = ef;
            .      }
            .  
            .  
            .      inline std::mutex& getLabelOpMutex(labeltype label) const {
            .          // calculate hash
       10,000          size_t lock_id = label & (MAX_LABEL_OPERATION_LOCKS - 1);
            .          return label_op_locks_[lock_id];
            .      }
            .  
            .  
            .      inline labeltype getExternalLabel(tableint internal_id) const {
            .          labeltype return_label;
   14,800,000          memcpy(&return_label, (data_level0_memory_ + internal_id * size_data_per_element_ + label_offset_), sizeof(labeltype));
            .          return return_label;
            .      }
            .  
            .  
            .      inline void setExternalLabel(tableint internal_id, labeltype label) const {
            .          memcpy((data_level0_memory_ + internal_id * size_data_per_element_ + label_offset_), &label, sizeof(labeltype));
            .      }
            .  
            .  
            .      inline labeltype *getExternalLabeLp(tableint internal_id) const {
       20,000          return (labeltype *) (data_level0_memory_ + internal_id * size_data_per_element_ + label_offset_);
            .      }
            .  
            .  
            .      inline char *getDataByInternalId(tableint internal_id) const {
1,564,062,808          return (data_level0_memory_ + internal_id * size_data_per_element_ + offsetData_);
            .      }
            .  
            .  
            .      int getRandomLevel(double reverse_size) {
            .          std::uniform_real_distribution<double> distribution(0.0, 1.0);
            .          double r = -log(distribution(level_generator_)) * reverse_size;
       40,000          return (int) r;
            .      }
            .  
            .      size_t getMaxElements() {
            .          return max_elements_;
            .      }
            .  
            .      size_t getCurrentElementCount() {
            .          return cur_element_count;
            .      }
            .  
            .      size_t getDeletedCount() {
            .          return num_deleted_;
            .      }
            .  
            .      std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst>
      192,114      searchBaseLayer(tableint ep_id, const void *data_point, int layer) {
       32,019          VisitedList *vl = visited_list_pool_->getFreeVisitedList();
    1,695,687  => /root/hnswlib/hnswlib/visited_list_pool.h:hnswlib::VisitedListPool::getFreeVisitedList() (10,673x)
       21,346          vl_type *visited_array = vl->mass;
       21,346          vl_type visited_array_tag = vl->curV;
            .  
            .          std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> top_candidates;
            .          std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> candidateSet;
            .  
            .          dist_t lowerBound;
       21,346          if (!isMarkedDeleted(ep_id)) {
       64,038              dist_t dist = fstdistfunc_(data_point, getDataByInternalId(ep_id), dist_func_param_);
    1,793,064  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (10,673x)
            .              top_candidates.emplace(dist, ep_id);
            .              lowerBound = dist;
       74,711              candidateSet.emplace(-dist, ep_id);
    1,292,852  => /usr/include/c++/9/bits/stl_queue.h:void std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>::emplace<int, unsigned int&>(int&&, unsigned int&) (10,673x)
            .          } else {
            .              lowerBound = std::numeric_limits<dist_t>::max();
            .              candidateSet.emplace(-lowerBound, ep_id);
            .          }
       42,692          visited_array[ep_id] = visited_array_tag;
            .  
    4,211,407          while (!candidateSet.empty()) {
    4,199,874              std::pair<dist_t, tableint> curr_el_pair = candidateSet.top();
    8,420,234              if ((-curr_el_pair.first) > lowerBound && top_candidates.size() == ef_construction_) {
            .                  break;
            .              }
            .              candidateSet.pop();
            .  
            .              tableint curNodeNum = curr_el_pair.second;
            .  
            .              std::unique_lock <std::mutex> lock(link_list_locks_[curNodeNum]);
            .  
            .              int *data;  // = (int *)(linkList0_ + curNodeNum * size_links_per_element0_);
    6,269,082              if (layer == 0) {
            .                  data = (int*)get_linklist0(curNodeNum);
            .              } else {
            .                  data = (int*)get_linklist(curNodeNum, layer);
            .  //                    data = (int *) (linkLists_[curNodeNum] + (layer - 1) * size_links_per_element_);
            .              }
    4,179,388              size_t size = getListCount((linklistsizeint*)data);
            .              tableint *datal = (tableint *) (data + 1);
            .  #ifdef USE_SSE
    6,269,082              _mm_prefetch((char *) (visited_array + *(data + 1)), _MM_HINT_T0);
            .              _mm_prefetch((char *) (visited_array + *(data + 1) + 64), _MM_HINT_T0);
            .              _mm_prefetch(getDataByInternalId(*datal), _MM_HINT_T0);
            .              _mm_prefetch(getDataByInternalId(*(datal + 1)), _MM_HINT_T0);
            .  #endif
            .  
  279,400,699              for (size_t j = 0; j < size; j++) {
  159,469,500                  tableint candidate_id = *(datal + j);
            .  //                    if (candidate_id == 0) continue;
            .  #ifdef USE_SSE
  119,602,125                  _mm_prefetch((char *) (visited_array + *(datal + j + 1)), _MM_HINT_T0);
            .                  _mm_prefetch(getDataByInternalId(*(datal + j + 1)), _MM_HINT_T0);
            .  #endif
  159,469,500                  if (visited_array[candidate_id] == visited_array_tag) continue;
   13,377,780                  visited_array[candidate_id] = visited_array_tag;
            .                  char *currObj1 = (getDataByInternalId(candidate_id));
            .  
   80,266,680                  dist_t dist1 = fstdistfunc_(data_point, currObj1, dist_func_param_);
2,247,467,040  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (13,377,780x)
   60,653,211                  if (top_candidates.size() < ef_construction_ || lowerBound > dist1) {
    7,371,328                      candidateSet.emplace(-dist1, candidate_id);
            .  #ifdef USE_SSE
            .                      _mm_prefetch(getDataByInternalId(candidateSet.top().second), _MM_HINT_T0);
            .  #endif
            .  
    7,371,328                      if (!isMarkedDeleted(candidate_id))
            .                          top_candidates.emplace(dist1, candidate_id);
            .  
    7,371,328                      if (top_candidates.size() > ef_construction_)
            .                          top_candidates.pop();
            .  
    7,371,328                      if (!top_candidates.empty())
    7,371,328                          lowerBound = top_candidates.top().first;
            .                  }
            .              }
            .          }
       32,019          visited_list_pool_->releaseVisitedList(vl);
    1,419,648  => /root/hnswlib/hnswlib/visited_list_pool.h:hnswlib::VisitedListPool::releaseVisitedList(hnswlib::VisitedList*) (10,673x)
            .  
            .          return top_candidates;
      128,076      }
            .  
            .  
            .      // bare_bone_search means there is no check for deletions and stop condition is ignored in return of extra performance
            .      template <bool bare_bone_search = true, bool collect_metrics = false>
            .      std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst>
    5,920,000      searchBaseLayerST(
            .          tableint ep_id,
            .          const void *data_point,
            .          size_t ef,
            .          BaseFilterFunctor* isIdAllowed = nullptr,
            .          BaseSearchStopCondition<dist_t>* stop_condition = nullptr) const {
            .  
            .  
            .          StopW search_timer;
            .          config->reset_timer(search_timer);
            .  
    1,110,000          VisitedList *vl = visited_list_pool_->getFreeVisitedList();
   58,190,130  => /root/hnswlib/hnswlib/visited_list_pool.h:hnswlib::VisitedListPool::getFreeVisitedList() (370,000x)
      740,000          vl_type *visited_array = vl->mass;
      740,000          vl_type visited_array_tag = vl->curV;
            .  
            .          std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> top_candidates;
            .          std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> candidate_set;
            .  
            .          dist_t lowerBound;
            .          if (bare_bone_search || 
            .              (!isMarkedDeleted(ep_id) && ((!isIdAllowed) || (*isIdAllowed)(getExternalLabel(ep_id))))) {
            .              char* ep_data = getDataByInternalId(ep_id);
    1,850,000              dist_t dist = fstdistfunc_(data_point, ep_data, dist_func_param_);
   62,160,000  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (370,000x)
            .              lowerBound = dist;
            .              top_candidates.emplace(dist, ep_id);
            .              if (!bare_bone_search && stop_condition) {
            .                  stop_condition->add_point_to_result(getExternalLabel(ep_id), ep_data, dist);
            .              }
    3,700,000              candidate_set.emplace(-dist, ep_id);
   44,770,000  => /usr/include/c++/9/bits/stl_queue.h:void std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>::emplace<int, unsigned int&>(int&&, unsigned int&) (370,000x)
            .          } else {
            .              lowerBound = std::numeric_limits<dist_t>::max();
            .              candidate_set.emplace(-lowerBound, ep_id);
            .          }
            .  
    1,480,000          visited_array[ep_id] = visited_array_tag;
            .  
            .          StopW timer;
            .  
            .  
            .          config->reset_timer(timer);
   73,505,972          while (!candidate_set.empty()) {
            .  
   73,505,972              std::pair<dist_t, tableint> current_node_pair = candidate_set.top();
   73,505,972              dist_t candidate_dist = -current_node_pair.first;
            .  
            .              bool flag_stop_search;
            .              if (bare_bone_search) {
            .                  flag_stop_search = candidate_dist > lowerBound;
            .              } else {
            .                  if (stop_condition) {
            .                      flag_stop_search = stop_condition->should_stop_search(candidate_dist, lowerBound);
            .                  } else {
            .                      flag_stop_search = candidate_dist > lowerBound && top_candidates.size() == ef;
            .                  }
            .              }
   73,505,972              if (flag_stop_search) {
            .                  break;
            .              }
            .              candidate_set.pop();
            .  
            .              tableint current_node_id = current_node_pair.second;
            .              int *data = (int *) get_linklist0(current_node_id);
   72,765,972              size_t size = getListCount((linklistsizeint*)data);
            .  //                bool cur_node_deleted = isMarkedDeleted(current_node_id);
            .              if (collect_metrics) {
            .                  metric_hops++;
            .                  metric_distance_computations+=size;
            .              }
            .  
            .  
            .  #ifdef USE_SSE
   72,765,972              _mm_prefetch((char *) (visited_array + *(data + 1)), _MM_HINT_T0);
            .              _mm_prefetch((char *) (visited_array + *(data + 1) + 64), _MM_HINT_T0);
  109,148,958              _mm_prefetch(data_level0_memory_ + (*(data + 1)) * size_data_per_element_ + offsetData_, _MM_HINT_T0);
            .              _mm_prefetch((char *) (data + 2), _MM_HINT_T0);
            .  #endif
            .  
            .  
            .  
3,774,205,051              for (size_t j = 1; j <= size; j++) {
2,242,693,239                  int candidate_id = *(data + j);
            .  //                    if (candidate_id == 0) continue;
            .  #ifdef USE_SSE
1,495,128,826                  _mm_prefetch((char *) (visited_array + *(data + j + 1)), _MM_HINT_T0);
1,495,128,826                  _mm_prefetch(data_level0_memory_ + (*(data + j + 1)) * size_data_per_element_ + offsetData_,
            .                                  _MM_HINT_T0);  ////////////
            .  #endif
            .              
            .  
3,737,822,065                  if (!(visited_array[candidate_id] == visited_array_tag)) {
  323,441,920                      visited_array[candidate_id] = visited_array_tag;
            .  
            .                      // config->reset_timer(timer);
            .  
            .                      char *currObj1 = (getDataByInternalId(candidate_id));
1,293,767,680                      dist_t dist = fstdistfunc_(data_point, currObj1, dist_func_param_);
54,338,242,560  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (323,441,920x)
            .  
            .                      // config->add_time(timer, config->dist_func_time);
            .  
            .                      bool flag_consider_candidate;
            .                      if (!bare_bone_search && stop_condition) {
            .                          flag_consider_candidate = stop_condition->should_consider_candidate(dist, lowerBound);
            .                      } else {
1,222,307,680                          flag_consider_candidate = top_candidates.size() < ef || lowerBound > dist;
            .                      }
            .  
            .                      if (flag_consider_candidate) {
  149,897,150                          candidate_set.emplace(-dist, candidate_id);
            .  #ifdef USE_SSE
  299,794,300                          _mm_prefetch(data_level0_memory_ + candidate_set.top().second * size_data_per_element_ +
            .                                          offsetLevel0_,  ///////////
            .                                          _MM_HINT_T0);  ////////////////////////
            .  #endif
            .  
            .                          if (bare_bone_search || 
            .                              (!isMarkedDeleted(candidate_id) && ((!isIdAllowed) || (*isIdAllowed)(getExternalLabel(candidate_id))))) {
            .                              top_candidates.emplace(dist, candidate_id);
            .                              if (!bare_bone_search && stop_condition) {
-- line 430 ----------------------------------------
-- line 433 ----------------------------------------
            .                          }
            .  
            .                          bool flag_remove_extra = false;
            .                          if (!bare_bone_search && stop_condition) {
            .                              flag_remove_extra = stop_condition->should_remove_extra();
            .                          } else {
            .                              flag_remove_extra = top_candidates.size() > ef;
            .                          }
  334,232,448                          while (flag_remove_extra) {
            .                              tableint id = top_candidates.top().second;
            .                              top_candidates.pop();
            .                              if (!bare_bone_search && stop_condition) {
            .                                  stop_condition->remove_point_from_result(getExternalLabel(id), getDataByInternalId(id), dist);
            .                                  flag_remove_extra = stop_condition->should_remove_extra();
            .                              } else {
            .                                  flag_remove_extra = top_candidates.size() > ef;
            .                              }
            .                          }
            .  
  149,897,150                          if (!top_candidates.empty())
  149,897,150                              lowerBound = top_candidates.top().first;
            .                      }
            .                  }
            .              }
            .          }
      370,000          config->add_time(timer, config->dist_func_time);
            .  
            .  
    1,110,000          visited_list_pool_->releaseVisitedList(vl);
   49,210,139  => /root/hnswlib/hnswlib/visited_list_pool.h:hnswlib::VisitedListPool::releaseVisitedList(hnswlib::VisitedList*) (370,000x)
            .  
      370,000          config->add_time(search_timer, config->search_time);
            .  
            .          return top_candidates;
   16,614,754      }
            .  
            .  
      193,494      void getNeighborsByHeuristic2(
            .          std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> &top_candidates,
            .          const size_t M) {
       27,642          if (top_candidates.size() < M) {
            .              return;
            .          }
            .  
            .          std::priority_queue<std::pair<dist_t, tableint>> queue_closest;
            .          std::vector<std::pair<dist_t, tableint>> return_list;
   15,262,852          while (top_candidates.size() > 0) {
    4,372,622              queue_closest.emplace(-top_candidates.top().first, top_candidates.top().second);
            .              top_candidates.pop();
            .          }
            .  
    5,777,429          while (queue_closest.size()) {
    3,820,428              if (return_list.size() >= M)
            .                  break;
    3,814,886              std::pair<dist_t, tableint> curent_pair = queue_closest.top();
    1,907,443              dist_t dist_to_query = -curent_pair.first;
            .              queue_closest.pop();
            .              bool good = true;
            .  
   10,983,015              for (std::pair<dist_t, tableint> second_pair : return_list) {
            .                  dist_t curdist =
   10,621,794                          fstdistfunc_(getDataByInternalId(second_pair.second),
  892,230,696  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (5,310,897x)
            .                                          getDataByInternalId(curent_pair.second),
            .                                          dist_func_param_);
   12,423,079                  if (curdist < dist_to_query) {
            .                      good = false;
            .                      break;
            .                  }
            .              }
            .              if (good) {
            .                  return_list.push_back(curent_pair);
            .              }
            .          }
            .  
      818,867          for (std::pair<dist_t, tableint> curent_pair : return_list) {
      347,446              top_candidates.emplace(-curent_pair.first, curent_pair.second);
            .          }
      667,521      }
            .  
            .  
            .      linklistsizeint *get_linklist0(tableint internal_id) const {
  198,210,195          return (linklistsizeint *) (data_level0_memory_ + internal_id * size_data_per_element_ + offsetLevel0_);
            .      }
            .  
            .  
            .      linklistsizeint *get_linklist0(tableint internal_id, char *data_level0_memory_) const {
            .          return (linklistsizeint *) (data_level0_memory_ + internal_id * size_data_per_element_ + offsetLevel0_);
            .      }
            .  
            .  
            .      linklistsizeint *get_linklist(tableint internal_id, int level) const {
   10,619,731          return (linklistsizeint *) (linkLists_[internal_id] + (level - 1) * size_links_per_element_);
            .      }
            .  
            .  
            .      linklistsizeint *get_linklist_at_level(tableint internal_id, int level) const {
            .          return level == 0 ? get_linklist0(internal_id) : get_linklist(internal_id, level);
            .      }
            .  
            .  
      181,441      tableint mutuallyConnectNewElement(
            .          const void *data_point,
            .          tableint cur_c,
            .          std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> &top_candidates,
            .          int level,
            .          bool isUpdate) {
       42,692          size_t Mcurmax = level ? maxM_ : maxM0_;
       32,019          getNeighborsByHeuristic2(top_candidates, M_);
1,880,385,115  => /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::getNeighborsByHeuristic2(std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>&, unsigned long) (10,673x)
       32,019          if (top_candidates.size() > M_)
            .              throw std::runtime_error("Should be not be more than M_ candidates returned by the heuristic");
            .  
            .          std::vector<tableint> selectedNeighbors;
       32,019          selectedNeighbors.reserve(M_);
    1,057,068  => /usr/include/c++/9/bits/vector.tcc:std::vector<unsigned int, std::allocator<unsigned int> >::reserve(unsigned long) (10,673x)
      293,215          while (top_candidates.size() > 0) {
            .              selectedNeighbors.push_back(top_candidates.top().second);
            .              top_candidates.pop();
            .          }
            .  
       42,692          tableint next_closest_entry_point = selectedNeighbors.back();
            .  
            .          {
            .              // lock only during the update
            .              // because during the addition the lock for cur_c is already acquired
       21,346              std::unique_lock <std::mutex> lock(link_list_locks_[cur_c], std::defer_lock);
       21,346              if (isUpdate) {
            .                  lock.lock();
            .              }
            .              linklistsizeint *ll_cur;
       32,019              if (level == 0)
            .                  ll_cur = get_linklist0(cur_c);
            .              else
            .                  ll_cur = get_linklist(cur_c, level);
            .  
       32,019              if (*ll_cur && !isUpdate) {
            .                  throw std::runtime_error("The newly inserted element should have blank link list");
            .              }
       32,019              setListCount(ll_cur, selectedNeighbors.size());
            .              tableint *data = (tableint *) (ll_cur + 1);
      445,159              for (size_t idx = 0; idx < selectedNeighbors.size(); idx++) {
      391,794                  if (data[idx] && !isUpdate)
            .                      throw std::runtime_error("Possible memory corruption");
      522,392                  if (level > element_levels_[selectedNeighbors[idx]])
            .                      throw std::runtime_error("Trying to make a link on a non-existent level");
            .  
      130,598                  data[idx] = selectedNeighbors[idx];
            .              }
            .          }
            .  
      685,009          for (size_t idx = 0; idx < selectedNeighbors.size(); idx++) {
      130,598              std::unique_lock <std::mutex> lock(link_list_locks_[selectedNeighbors[idx]]);
            .  
            .              linklistsizeint *ll_other;
      391,794              if (level == 0)
            .                  ll_other = get_linklist0(selectedNeighbors[idx]);
            .              else
            .                  ll_other = get_linklist(selectedNeighbors[idx], level);
            .  
      130,598              size_t sz_link_list_other = getListCount(ll_other);
            .  
      261,196              if (sz_link_list_other > Mcurmax)
            .                  throw std::runtime_error("Bad value of sz_link_list_other");
      261,196              if (selectedNeighbors[idx] == cur_c)
            .                  throw std::runtime_error("Trying to connect an element to itself");
      522,392              if (level > element_levels_[selectedNeighbors[idx]])
            .                  throw std::runtime_error("Trying to make a link on a non-existent level");
            .  
            .              tableint *data = (tableint *) (ll_other + 1);
            .  
            .              bool is_cur_c_present = false;
      261,196              if (isUpdate) {
            .                  for (size_t j = 0; j < sz_link_list_other; j++) {
            .                      if (data[j] == cur_c) {
            .                          is_cur_c_present = true;
            .                          break;
            .                      }
            .                  }
            .              }
            .  
            .              // If cur_c is already present in the neighboring connections of `selectedNeighbors[idx]` then no need to modify any connections or run the heuristics.
            .              if (!is_cur_c_present) {
      391,794                  if (sz_link_list_other < Mcurmax) {
      254,900                      data[sz_link_list_other] = cur_c;
      254,900                      setListCount(ll_other, sz_link_list_other + 1);
            .                  } else {
            .                      // finding the "weakest" element to replace it with the new one
        9,444                      dist_t d_max = fstdistfunc_(getDataByInternalId(cur_c), getDataByInternalId(selectedNeighbors[idx]),
      528,864  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (3,148x)
            .                                                  dist_func_param_);
            .                      // Heuristic:
            .                      std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> candidates;
            .                      candidates.emplace(d_max, cur_c);
            .  
      295,456                      for (size_t j = 0; j < sz_link_list_other; j++) {
       94,288                          candidates.emplace(
      282,864                                  fstdistfunc_(getDataByInternalId(data[j]), getDataByInternalId(selectedNeighbors[idx]),
   15,840,384  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (94,288x)
            .                                                  dist_func_param_), data[j]);
            .                      }
            .  
       12,592                      getNeighborsByHeuristic2(candidates, Mcurmax);
  140,458,399  => /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::getNeighborsByHeuristic2(std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>&, unsigned long) (3,148x)
            .  
            .                      int indx = 0;
       99,564                      while (candidates.size() > 0) {
       86,972                          data[indx] = candidates.top().second;
            .                          candidates.pop();
       86,972                          indx++;
            .                      }
            .  
        3,148                      setListCount(ll_other, indx);
            .                      // Nearest K:
            .                      /*int indx = -1;
            .                      for (int j = 0; j < sz_link_list_other; j++) {
            .                          dist_t d = fstdistfunc_(getDataByInternalId(data[j]), getDataByInternalId(rez[idx]), dist_func_param_);
            .                          if (d > d_max) {
            .                              indx = j;
            .                              d_max = d;
            .                          }
-- line 646 ----------------------------------------
-- line 648 ----------------------------------------
            .                      if (indx >= 0) {
            .                          data[indx] = cur_c;
            .                      } */
            .                  }
            .              }
            .          }
            .  
            .          return next_closest_entry_point;
      128,076      }
            .  
            .  
            .      void resizeIndex(size_t new_max_elements) {
            .          if (new_max_elements < cur_element_count)
            .              throw std::runtime_error("Cannot resize, max element is less than the current number of elements");
            .  
            .          visited_list_pool_.reset(new VisitedListPool(1, new_max_elements));
            .  
-- line 664 ----------------------------------------
-- line 954 ----------------------------------------
            .      }
            .  
            .  
            .      /*
            .      * Checks the first 16 bits of the memory to see if the element is marked deleted.
            .      */
            .      bool isMarkedDeleted(tableint internalId) const {
            .          unsigned char *ll_cur = ((unsigned char*)get_linklist0(internalId)) + 2;
    7,432,670          return *ll_cur & DELETE_MARK;
            .      }
            .  
            .  
            .      unsigned short int getListCount(linklistsizeint * ptr) const {
    4,989,596          return *((unsigned short int *)ptr);
            .      }
            .  
            .  
            .      void setListCount(linklistsizeint * ptr, unsigned short int size) const {
            .          *((unsigned short int*)(ptr))=*((unsigned short int *)&size);
            .      }
            .  
            .  
            .      /*
            .      * Adds point. Updates the point if it is already in the index.
            .      * If replacement of deleted elements is enabled: replaces previously deleted point if any, updating it with new point
            .      */
      140,000      void addPoint(const void *data_point, labeltype label, bool replace_deleted = false) {
       40,000          if ((allow_replace_deleted_ == false) && (replace_deleted == true)) {
            .              throw std::runtime_error("Replacement of deleted elements is disabled in constructor");
            .          }
            .  
            .          // lock all operations with element by label
            .          std::unique_lock <std::mutex> lock_label(getLabelOpMutex(label));
       20,000          if (!replace_deleted) {
       50,000              addPoint(data_point, label, -1);
7,002,987,644  => /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::addPoint(void const*, unsigned long, int) (10,000x)
            .              return;
            .          }
            .          // check if there is vacant place
            .          tableint internal_id_replaced;
            .          std::unique_lock <std::mutex> lock_deleted_elements(deleted_elements_lock);
            .          bool is_vacant_place = !deleted_elements.empty();
            .          if (is_vacant_place) {
            .              internal_id_replaced = *deleted_elements.begin();
-- line 996 ----------------------------------------
-- line 1010 ----------------------------------------
            .              std::unique_lock <std::mutex> lock_table(label_lookup_lock);
            .              label_lookup_.erase(label_replaced);
            .              label_lookup_[label] = internal_id_replaced;
            .              lock_table.unlock();
            .  
            .              unmarkDeletedInternal(internal_id_replaced);
            .              updatePoint(data_point, internal_id_replaced, 1.0);
            .          }
      100,000      }
            .  
            .  
            .      void updatePoint(const void *dataPoint, tableint internalId, float updateNeighborProbability) {
            .          // update the feature vector associated with existing point with new vector
            .          memcpy(getDataByInternalId(internalId), dataPoint, data_size_);
            .  
            .          int maxLevelCopy = maxlevel_;
            .          tableint entryPointCopy = enterpoint_node_;
-- line 1026 ----------------------------------------
-- line 1171 ----------------------------------------
            .          int size = getListCount(data);
            .          std::vector<tableint> result(size);
            .          tableint *ll = (tableint *) (data + 1);
            .          memcpy(result.data(), ll, size * sizeof(tableint));
            .          return result;
            .      }
            .  
            .  
      150,000      tableint addPoint(const void *data_point, labeltype label, int level) {
            .          tableint cur_c = 0;
            .          {
            .              // Checking if the element with the same label already exists
            .              // if so, updating it *instead* of creating a new element.
       10,000              std::unique_lock <std::mutex> lock_table(label_lookup_lock);
            .              auto search = label_lookup_.find(label);
            .              if (search != label_lookup_.end()) {
            .                  tableint existingInternalId = search->second;
            .                  if (allow_replace_deleted_) {
            .                      if (isMarkedDeleted(existingInternalId)) {
            .                          throw std::runtime_error("Can't use addPoint to update deleted elements if replacement of deleted elements is enabled.");
            .                      }
            .                  }
-- line 1192 ----------------------------------------
-- line 1195 ----------------------------------------
            .                  if (isMarkedDeleted(existingInternalId)) {
            .                      unmarkDeletedInternal(existingInternalId);
            .                  }
            .                  updatePoint(data_point, existingInternalId, 1.0);
            .  
            .                  return existingInternalId;
            .              }
            .  
       20,000              if (cur_element_count >= max_elements_) {
            .                  throw std::runtime_error("The number of elements exceeds the specified limit");
            .              }
            .  
       10,000              cur_c = cur_element_count;
            .              cur_element_count++;
       10,000              label_lookup_[label] = cur_c;
            .          }
            .  
            .          std::unique_lock <std::mutex> lock_el(link_list_locks_[cur_c]);
       20,000          int curlevel = getRandomLevel(mult_);
       30,000          if (level > 0)
            .              curlevel = level;
            .  
       30,000          element_levels_[cur_c] = curlevel;
            .  
       10,000          std::unique_lock <std::mutex> templock(global);
       20,000          int maxlevelcopy = maxlevel_;
       20,000          if (curlevel <= maxlevelcopy)
       29,988              templock.unlock();
      109,956  => /usr/include/c++/9/bits/unique_lock.h:std::unique_lock<std::mutex>::unlock() [clone .isra.0] (9,996x)
       20,000          tableint currObj = enterpoint_node_;
       10,000          tableint enterpoint_copy = enterpoint_node_;
            .  
       50,000          memset(data_level0_memory_ + cur_c * size_data_per_element_ + offsetLevel0_, 0, size_data_per_element_);
            .  
            .          // Initialisation of the data and label
            .          memcpy(getExternalLabeLp(cur_c), &label, sizeof(labeltype));
            .          memcpy(getDataByInternalId(cur_c), data_point, data_size_);
            .  
       30,000          if (curlevel) {
        5,805              linkLists_[cur_c] = (char *) malloc(size_links_per_element_ * curlevel + 1);
       32,992  => ???:0x000000000010b810 (645x)
        1,290              if (linkLists_[cur_c] == nullptr)
            .                  throw std::runtime_error("Not enough memory: addPoint failed to allocate linklist");
            .              memset(linkLists_[cur_c], 0, size_links_per_element_ * curlevel + 1);
            .          }
            .  
       30,000          if ((signed)currObj != -1) {
       59,994              if (curlevel < maxlevelcopy) {
       99,700                  dist_t curdist = fstdistfunc_(data_point, getDataByInternalId(currObj), dist_func_param_);
    1,674,960  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (9,970x)
      153,828                  for (int level = maxlevelcopy; level > curlevel; level--) {
            .                      bool changed = true;
      140,440                      while (changed) {
      222,030                          changed = false;
            .                          unsigned int *data;
            .                          std::unique_lock <std::mutex> lock(link_list_locks_[currObj]);
            .                          data = get_linklist(currObj, level);
            .                          int size = getListCount(data);
            .  
            .                          tableint *datal = (tableint *) (data + 1);
    1,329,119                          for (int i = 0; i < size; i++) {
      818,562                              tableint cand = datal[i];
      818,562                              if (cand < 0 || cand > max_elements_)
            .                                  throw std::runtime_error("cand error");
    1,227,843                              dist_t d = fstdistfunc_(data_point, getDataByInternalId(cand), dist_func_param_);
   68,759,208  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (409,281x)
      857,317                              if (d < curdist) {
            .                                  curdist = d;
       38,755                                  currObj = cand;
       38,755                                  changed = true;
            .                              }
            .                          }
            .                      }
            .                  }
            .              }
            .  
            .              bool epDeleted = isMarkedDeleted(enterpoint_copy);
       81,311              for (int level = std::min(curlevel, maxlevelcopy); level >= 0; level--) {
        1,348                  if (level > maxlevelcopy || level < 0)  // possible?
            .                      throw std::runtime_error("Level error");
            .  
       64,038                  std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> top_candidates = searchBaseLayer(
4,839,203,143  => /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::searchBaseLayer(unsigned int, void const*, int) (10,673x)
            .                          currObj, data_point, level);
       21,346                  if (epDeleted) {
       19,998                      top_candidates.emplace(fstdistfunc_(data_point, getDataByInternalId(enterpoint_copy), dist_func_param_), enterpoint_copy);
            .                      if (top_candidates.size() > ef_construction_)
            .                          top_candidates.pop();
            .                  }
       85,384                  currObj = mutuallyConnectNewElement(data_point, cur_c, top_candidates, level, false);
2,077,433,744  => /root/hnswlib/hnswlib/hnswalg.h:hnswlib::HierarchicalNSW<int>::mutuallyConnectNewElement(void const*, unsigned int, std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst>&, int, bool) (10,673x)
            .              }
            .          } else {
            .              // Do nothing for the first element
            1              enterpoint_node_ = 0;
            2              maxlevel_ = curlevel;
            .          }
            .  
            .          // Releasing lock for the maximum level
       30,000          if (curlevel > maxlevelcopy) {
            8              enterpoint_node_ = cur_c;
            4              maxlevel_ = curlevel;
            .          }
            .          return cur_c;
      120,000      }
            .  
            .  
            .      std::priority_queue<std::pair<dist_t, labeltype >>
            .      searchKnn(const void *query_data, size_t k, BaseFilterFunctor* isIdAllowed = nullptr) const {
            .          std::priority_queue<std::pair<dist_t, labeltype >> result;
      740,000          if (cur_element_count == 0) return result;
            .  
      740,000          tableint currObj = enterpoint_node_;
    1,480,000          dist_t curdist = fstdistfunc_(query_data, getDataByInternalId(enterpoint_node_), dist_func_param_);
   62,160,000  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (370,000x)
            .  
    8,880,000          for (int level = maxlevel_; level > 0; level--) {
            .              bool changed = true;
   12,553,286              while (changed) {
   11,694,405                  changed = false;
            .                  unsigned int *data;
            .  
            .                  data = (unsigned int *) get_linklist(currObj, level);
            .                  int size = getListCount(data);
            .                  metric_hops++;
            .                  metric_distance_computations+=size;
            .  
            .                  tableint *datal = (tableint *) (data + 1);
   77,398,820                  for (int i = 0; i < size; i++) {
   51,032,472                      tableint cand = datal[i];
   34,021,648                      if (cand < 0 || cand > max_elements_)
            .                          throw std::runtime_error("cand error");
   51,032,472                      dist_t d = fstdistfunc_(query_data, getDataByInternalId(cand), dist_func_param_);
2,857,818,432  => /root/hnswlib/hnswlib/space_l2.h:hnswlib::L2SqrI4x(void const*, void const*, void const*) (17,010,824x)
            .  
   35,631,999                      if (d < curdist) {
            .                          curdist = d;
    1,610,351                          currObj = cand;
    1,610,351                          changed = true;
            .                      }
            .                  }
            .              }
            .          }
            .  
            .          std::priority_queue<std::pair<dist_t, tableint>, std::vector<std::pair<dist_t, tableint>>, CompareByFirst> top_candidates;
      740,000          bool bare_bone_search = !num_deleted_ && !isIdAllowed;
            .          if (bare_bone_search) {
    5,180,000              top_candidates = searchBaseLayerST<true>(
100,683,463,475  => /root/hnswlib/hnswlib/hnswalg.h:std::priority_queue<std::pair<int, unsigned int>, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > >, hnswlib::HierarchicalNSW<int>::CompareByFirst> hnswlib::HierarchicalNSW<int>::searchBaseLayerST<true, false>(unsigned int, void const*, unsigned long, hnswlib::BaseFilterFunctor*, hnswlib::BaseSearchStopCondition<int>*) const (370,000x)
            .                      currObj, query_data, std::max(ef_, k), isIdAllowed);
            .          } else {
            .              top_candidates = searchBaseLayerST<false>(
            .                      currObj, query_data, std::max(ef_, k), isIdAllowed);
            .          }
            .  
   66,980,000          while (top_candidates.size() > k) {
            .              top_candidates.pop();
            .          }
    8,140,000          while (top_candidates.size() > 0) {
    3,700,000              std::pair<dist_t, tableint> rez = top_candidates.top();
            .              result.push(std::pair<dist_t, labeltype>(rez.first, getExternalLabel(rez.second)));
            .              top_candidates.pop();
            .          }
            .          return result;
            .      }
            .  
            .  
            .      std::vector<std::pair<dist_t, labeltype >>
-- line 1353 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_pair.h
--------------------------------------------------------------------------------
Ir            

-- line 304 ----------------------------------------
            .        constexpr pair(pair&&) = default;
            .  
            .        // DR 811.
            .        template<typename _U1, typename
            .  	       enable_if<_PCCP::template
            .  			   _MoveCopyPair<true, _U1, _T2>(),
            .                           bool>::type=true>
            .         constexpr pair(_U1&& __x, const _T2& __y)
   27,136,440         : first(std::forward<_U1>(__x)), second(__y) { }
            .  
            .        template<typename _U1, typename
            .  	       enable_if<_PCCP::template
            .  			   _MoveCopyPair<false, _U1, _T2>(),
            .                           bool>::type=false>
            .         explicit constexpr pair(_U1&& __x, const _T2& __y)
            .         : first(std::forward<_U1>(__x)), second(__y) { }
            .  
-- line 320 ----------------------------------------
-- line 334 ----------------------------------------
            .  
            .        template<typename _U1, typename _U2, typename
            .  	       enable_if<_PCCP::template
            .  			   _MoveConstructiblePair<_U1, _U2>()
            .  			  && _PCCP::template
            .  			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
            .                           bool>::type=true>
            .  	constexpr pair(_U1&& __x, _U2&& __y)
  341,099,594  	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
            .  
            .        template<typename _U1, typename _U2, typename
            .  	       enable_if<_PCCP::template
            .  			   _MoveConstructiblePair<_U1, _U2>()
            .  			  && !_PCCP::template
            .  			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
            .                           bool>::type=false>
            .  	explicit constexpr pair(_U1&& __x, _U2&& __y)
-- line 350 ----------------------------------------
-- line 388 ----------------------------------------
            .        pair&
            .        operator=(typename conditional<
            .  		__and_<is_move_assignable<_T1>,
            .  		       is_move_assignable<_T2>>::value,
            .  		pair&&, __nonesuch_no_braces&&>::type __p)
            .        noexcept(__and_<is_nothrow_move_assignable<_T1>,
            .  		      is_nothrow_move_assignable<_T2>>::value)
            .        {
1,498,220,557  	first = std::forward<first_type>(__p.first);
2,426,257,238  	second = std::forward<second_type>(__p.second);
            .  	return *this;
            .        }
            .  
            .        template<typename _U1, typename _U2>
            .        typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
            .  				is_assignable<_T2&, const _U2&>>::value,
            .  			 pair&>::type
            .  	operator=(const pair<_U1, _U2>& __p)
-- line 405 ----------------------------------------
-- line 448 ----------------------------------------
            .      operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
            .      { return __x.first == __y.first && __x.second == __y.second; }
            .  
            .    /// <http://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
            .    template<typename _T1, typename _T2>
            .      inline _GLIBCXX_CONSTEXPR bool
            .      operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
            .      { return __x.first < __y.first
  109,658,273  	     || (!(__y.first < __x.first) && __x.second < __y.second); }
            .  
            .    /// Uses @c operator== to find the result.
            .    template<typename _T1, typename _T2>
            .      inline _GLIBCXX_CONSTEXPR bool
            .      operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
            .      { return !(__x == __y); }
            .  
            .    /// Uses @c operator< to find the result.
-- line 464 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir          

-- line 461 ----------------------------------------
          .         *  @param  __a  An allocator.
          .         *  @param  __p  Pointer to the memory to deallocate.
          .         *  @param  __n  The number of objects space was allocated for.
          .         *
          .         *  Calls <tt> a.deallocate(p, n) </tt>
          .        */
          .        static void
          .        deallocate(allocator_type& __a, pointer __p, size_type __n)
  1,850,006        { __a.deallocate(__p, __n); }
          .  
          .        /**
          .         *  @brief  Construct an object of type @a _Up
          .         *  @param  __a  An allocator.
          .         *  @param  __p  Pointer to memory of suitable size and alignment for Tp
          .         *  @param  __args Constructor arguments.
          .         *
          .         *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
          .        */
          .        template<typename _Up, typename... _Args>
          .  	static void
310,068,872  	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
          .  	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
          .  	{ __a.construct(__p, std::forward<_Args>(__args)...); }
          .  
          .        /**
          .         *  @brief  Destroy an object of type @a _Up
          .         *  @param  __a  An allocator.
          .         *  @param  __p  Pointer to the object to destroy
          .         *
-- line 489 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir            

-- line 796 ----------------------------------------
            .        typedef typename __traits_type::reference 	reference;
            .        typedef typename __traits_type::pointer   	pointer;
            .  
            .        _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
            .        : _M_current(_Iterator()) { }
            .  
            .        explicit
            .        __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  161,897,282        : _M_current(__i) { }
            .  
            .        // Allow iterator to const_iterator conversion
            .        template<typename _Iter>
            .          __normal_iterator(const __normal_iterator<_Iter,
            .  			  typename __enable_if<
            .        	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
            .  		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
            .          : _M_current(__i.base()) { }
-- line 812 ----------------------------------------
-- line 818 ----------------------------------------
            .  
            .        pointer
            .        operator->() const _GLIBCXX_NOEXCEPT
            .        { return _M_current; }
            .  
            .        __normal_iterator&
            .        operator++() _GLIBCXX_NOEXCEPT
            .        {
    3,577,177  	++_M_current;
            .  	return *this;
            .        }
            .  
            .        __normal_iterator
            .        operator++(int) _GLIBCXX_NOEXCEPT
            .        { return __normal_iterator(_M_current++); }
            .  
            .        // Bidirectional iterator requirements
            .        __normal_iterator&
            .        operator--() _GLIBCXX_NOEXCEPT
            .        {
   38,131,918  	--_M_current;
            .  	return *this;
            .        }
            .  
            .        __normal_iterator
            .        operator--(int) _GLIBCXX_NOEXCEPT
            .        { return __normal_iterator(_M_current--); }
            .  
            .        // Random access iterator requirements
-- line 846 ----------------------------------------
-- line 849 ----------------------------------------
            .        { return _M_current[__n]; }
            .  
            .        __normal_iterator&
            .        operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
            .        { _M_current += __n; return *this; }
            .  
            .        __normal_iterator
            .        operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
3,443,694,341        { return __normal_iterator(_M_current + __n); }
            .  
            .        __normal_iterator&
            .        operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
            .        { _M_current -= __n; return *this; }
            .  
            .        __normal_iterator
            .        operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
            .        { return __normal_iterator(_M_current - __n); }
-- line 865 ----------------------------------------
-- line 978 ----------------------------------------
            .      inline typename __normal_iterator<_IteratorL, _Container>::difference_type
            .      operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
            .  	      const __normal_iterator<_IteratorR, _Container>& __rhs)
            .  #endif
            .      { return __lhs.base() - __rhs.base(); }
            .  
            .    template<typename _Iterator, typename _Container>
            .      inline typename __normal_iterator<_Iterator, _Container>::difference_type
   39,218,575      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
            .  	      const __normal_iterator<_Iterator, _Container>& __rhs)
            .      _GLIBCXX_NOEXCEPT
  963,043,101      { return __lhs.base() - __rhs.base(); }
            .  
            .    template<typename _Iterator, typename _Container>
            .      inline __normal_iterator<_Iterator, _Container>
            .      operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
            .  	      __n, const __normal_iterator<_Iterator, _Container>& __i)
            .      _GLIBCXX_NOEXCEPT
            .      { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
            .  
-- line 997 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_queue.h
--------------------------------------------------------------------------------
Ir         

-- line 597 ----------------------------------------
         .         */
         .        _GLIBCXX_NODISCARD bool
         .        empty() const
         .        { return c.empty(); }
         .  
         .        /**  Returns the number of elements in the %queue.  */
         .        size_type
         .        size() const
53,555,731        { return c.size(); }
         .  
         .        /**
         .         *  Returns a read-only (constant) reference to the data at the first
         .         *  element of the %queue.
         .         */
         .        const_reference
         .        top() const
         .        {
-- line 613 ----------------------------------------
-- line 635 ----------------------------------------
         .        push(value_type&& __x)
         .        {
         .  	c.push_back(std::move(__x));
         .  	std::push_heap(c.begin(), c.end(), comp);
         .        }
         .  
         .        template<typename... _Args>
         .  	void
 3,426,057  	emplace(_Args&&... __args)
         .  	{
         .  	  c.emplace_back(std::forward<_Args>(__args)...);
         .  	  std::push_heap(c.begin(), c.end(), comp);
 6,677,053  	}
         .  #endif
         .  
         .        /**
         .         *  @brief  Removes first element.
         .         *
         .         *  This is a typical %queue operation.  It shrinks the %queue
         .         *  by one.  The time complexity of the operation depends on the
         .         *  underlying sequence.
-- line 655 ----------------------------------------
-- line 659 ----------------------------------------
         .         *  called.
         .         */
         .        void
         .        pop()
         .        {
         .  	__glibcxx_requires_nonempty();
         .  	std::pop_heap(c.begin(), c.end(), comp);
         .  	c.pop_back();
 3,214,202        }
         .  
         .  #if __cplusplus >= 201103L
         .        void
         .        swap(priority_queue& __pq)
         .        noexcept(__and_<
         .  #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
         .  		 __is_nothrow_swappable<_Sequence>,
         .  #else
-- line 675 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /root/hnswlib/experiment/calc_group_truth.h
--------------------------------------------------------------------------------
Ir         

-- line 5 ----------------------------------------
         .  #include "data_loader.h"
         .  #include "../hnswlib/hnswlib.h"
         .  
         .  using DATALOADER::DataLoader;
         .  
         .  namespace GroundTruth {
         .  
         .  template<typename dist_t>
        16  void calc_gt(std::string data_dir, 
         .      DataLoader *data_loader, 
         .      DataLoader *query_data_loader,
         .      hnswlib::SpaceInterface<dist_t> &space,
         .      bool overwrite) {
         .      
         9      std::string gnd_file = data_dir + "/gnd_" + std::to_string(data_loader->get_elements()) + ".gt";
        81  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (1x)
         3  => /root/hnswlib/experiment/data_loader.cpp:DATALOADER::DataLoader::get_elements() (1x)
         .      
         .      std::cout << "gndfile = " << gnd_file << '\n';
         .  
         .      std::ifstream file(gnd_file.c_str());
         4      if (file && !overwrite) {
         .          // gnd already exist.
         .          file.close();
         2          return ;
     4,460  => ???:0x000000000010b520 (1x)
         .      }
         .      file.close();
         .  
         .      std::ofstream output_file(gnd_file.c_str(), std::ios::binary);
         .  
         .      uint32_t query_elements = query_data_loader->get_elements();
         .      uint32_t data_elements = data_loader->get_elements();
         .      uint32_t K = 10;
-- line 35 ----------------------------------------
-- line 53 ----------------------------------------
         .          }
         .          std::reverse(nearestK.begin(), nearestK.end());
         .          // if (i < 10) {
         .          //     std::cout << "i = " << i << "\n";
         .          //     for (auto nn:nearestK) std::cout << nn << " "; std::cout << "\n";
         .          // }
         .          output_file.write(reinterpret_cast<const char*>(nearestK.data()), sizeof(uint32_t) * nearestK.size());
         .      }
        11  }
         .  
         .  class GT_Loader {
         .  public:
        14      GT_Loader(std::string data_dir, 
         .      DataLoader *data_loader, 
         2      DataLoader *query_data_loader) {
         .  
         8          gt_path = data_dir + "/gnd_" + std::to_string(data_loader->get_elements()) + ".gt";
        81  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (1x)
         3  => /root/hnswlib/experiment/data_loader.cpp:DATALOADER::DataLoader::get_elements() (1x)
         .          file = std::ifstream(gt_path, std::ios::binary);
         2          if (!file) {
         .              std::cerr << "file " << gt_path << " not exist!\n";
         .              return ;
         .          }
         .  
         5          file.seekg(4);
     6,713  => ???:0x000000000010b7d0 (1x)
         4          file.read(reinterpret_cast<char*>(&K), 4);
     2,948  => ???:0x000000000010b7c0 (1x)
        11      }
         .      ~GT_Loader() {
         1          file.close();
         .      }
         .      std::vector<uint32_t> get_knn_gt(int id) {
   740,000          std::vector<uint32_t> ans(K);
 2,590,000          file.seekg(8 + id * 4 * K);
88,060,000  => ???:0x000000000010b7d0 (370,000x)
 2,590,000          file.read(reinterpret_cast<char*>(ans.data()), K * 4);
110,260,000  => ???:0x000000000010b7c0 (370,000x)
         .          return ans;
         .      }
         .  
         .      template<typename dist_t>
         .      double calc_recall(std::priority_queue<std::pair<dist_t, hnswlib::labeltype >> knn, int id, int k) {
         .          std::vector<uint32_t> knn_id;
 9,620,000          while (knn.size()) {
 7,400,000              knn_id.push_back(knn.top().second);
         .              knn.pop();
         .          }
         .          return calc_recall(knn_id, id, k);
         .      }
         .      double calc_recall(std::vector<uint32_t> &knn, int id, int k) {
         .          auto gt = get_knn_gt(id);
 1,110,000          int correct = 0;
15,170,000          for (int i = 0; i < k; i++) {
60,719,030              for (auto nn: knn) {
61,088,390                  if (gt[i] == nn) {
 3,580,790                      correct++;
         .                      break;
         .                  }
         .              }
         .          }
         .          
       222          return 1.0 * correct / k;
         .      }
         .  private:
         .      std::string gt_path;
         .      std::ifstream file;
         .      uint32_t K;
         .  };
         .  
         .  }-- line 118 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_heap.h
--------------------------------------------------------------------------------
Ir            

-- line 124 ----------------------------------------
            .  
            .    template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
            .  	   typename _Compare>
            .      void
            .      __push_heap(_RandomAccessIterator __first,
            .  		_Distance __holeIndex, _Distance __topIndex, _Tp __value,
            .  		_Compare& __comp)
            .      {
1,382,593,780        _Distance __parent = (__holeIndex - 1) / 2;
2,127,890,289        while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
            .  	{
            .  	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
            .  	  __holeIndex = __parent;
1,828,474,199  	  __parent = (__holeIndex - 1) / 2;
            .  	}
            .        *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
            .      }
            .  
            .    /**
            .     *  @brief  Push an element onto a heap.
            .     *  @param  __first  Start of heap.
            .     *  @param  __last   End of heap + element.
-- line 145 ----------------------------------------
-- line 199 ----------------------------------------
            .  	    _RandomAccessIterator>)
            .        __glibcxx_requires_valid_range(__first, __last);
            .        __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
            .        __glibcxx_requires_heap_pred(__first, __last - 1, __comp);
            .  
            .        __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
            .  	__cmp(_GLIBCXX_MOVE(__comp));
            .        _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
  153,597,150        std::__push_heap(__first, _DistanceType((__last - __first) - 1),
            .  		       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);
            .      }
            .  
            .    template<typename _RandomAccessIterator, typename _Distance,
            .  	   typename _Tp, typename _Compare>
            .      void
1,546,679,303      __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
            .  		  _Distance __len, _Tp __value, _Compare __comp)
            .      {
            .        const _Distance __topIndex = __holeIndex;
            .        _Distance __secondChild = __holeIndex;
3,352,162,999        while (__secondChild < (__len - 1) / 2)
            .  	{
1,434,137,358  	  __secondChild = 2 * (__secondChild + 1);
2,111,853,894  	  if (__comp(__first + __secondChild,
            .  		     __first + (__secondChild - 1)))
    3,330,010  	    __secondChild--;
            .  	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
            .  	  __holeIndex = __secondChild;
            .  	}
  784,087,984        if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
            .  	{
            .  	  __secondChild = 2 * (__secondChild + 1);
   13,917,817  	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
            .  						     + (__secondChild - 1)));
            .  	  __holeIndex = __secondChild - 1;
            .  	}
            .        __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
            .  	__cmp(_GLIBCXX_MOVE(__comp));
            .        std::__push_heap(__first, __holeIndex, __topIndex,
            .  		       _GLIBCXX_MOVE(__value), __cmp);
  731,721,858      }
            .  
            .    template<typename _RandomAccessIterator, typename _Compare>
            .      inline void
            .      __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
            .  	       _RandomAccessIterator __result, _Compare& __comp)
            .      {
            .        typedef typename iterator_traits<_RandomAccessIterator>::value_type
            .  	_ValueType;
            .        typedef typename iterator_traits<_RandomAccessIterator>::difference_type
            .  	_DistanceType;
            .  
  159,543,595        _ValueType __value = _GLIBCXX_MOVE(*__result);
            .        *__result = _GLIBCXX_MOVE(*__first);
  498,019,535        std::__adjust_heap(__first, _DistanceType(0),
  639,701,682  => /usr/include/c++/9/bits/stl_heap.h:void std::__adjust_heap<__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst> >(__gnu_cxx::__normal_iterator<std::pair<int, unsigned int>*, std::vector<std::pair<int, unsigned int>, std::allocator<std::pair<int, unsigned int> > > >, long, long, std::pair<int, unsigned int>, __gnu_cxx::__ops::_Iter_comp_iter<hnswlib::HierarchicalNSW<int>::CompareByFirst>) (3,685,695x)
            .  			 _DistanceType(__last - __first),
            .  			 _GLIBCXX_MOVE(__value), __comp);
            .      }
            .  
            .    /**
            .     *  @brief  Pop an element off a heap.
            .     *  @param  __first  Start of heap.
            .     *  @param  __last   End of heap.
-- line 261 ----------------------------------------
-- line 296 ----------------------------------------
            .     *  @ingroup heap_algorithms
            .     *
            .     *  This operation pops the top of the heap.  The elements __first
            .     *  and __last-1 are swapped and [__first,__last-1) is made into a
            .     *  heap.  Comparisons are made using comp.
            .    */
            .    template<typename _RandomAccessIterator, typename _Compare>
            .      inline void
  230,014,202      pop_heap(_RandomAccessIterator __first,
            .  	     _RandomAccessIterator __last, _Compare __comp)
            .      {
            .        // concept requirements
            .        __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
            .  	    _RandomAccessIterator>)
            .        __glibcxx_requires_valid_range(__first, __last);
            .        __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
            .        __glibcxx_requires_non_empty_range(__first, __last);
            .        __glibcxx_requires_heap_pred(__first, __last, __comp);
            .  
  246,732,388        if (__last - __first > 1)
            .  	{
            .  	  typedef __decltype(__comp) _Cmp;
            .  	  __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(_GLIBCXX_MOVE(__comp));
            .  	  --__last;
            .  	  std::__pop_heap(__first, __last, __last, __cmp);
            .  	}
            .      }
            .  
-- line 323 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/predefined_ops.h
--------------------------------------------------------------------------------
Ir            

-- line 135 ----------------------------------------
            .        _Iter_comp_iter(_Compare __comp)
            .  	: _M_comp(_GLIBCXX_MOVE(__comp))
            .        { }
            .  
            .        template<typename _Iterator1, typename _Iterator2>
            .          _GLIBCXX14_CONSTEXPR
            .          bool
            .          operator()(_Iterator1 __it1, _Iterator2 __it2)
1,398,914,220          { return bool(_M_comp(*__it1, *__it2)); }
            .      };
            .  
            .    template<typename _Compare>
            .      _GLIBCXX14_CONSTEXPR
            .      inline _Iter_comp_iter<_Compare>
            .      __iter_comp_iter(_Compare __comp)
            .      { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
            .  
-- line 151 ----------------------------------------
-- line 168 ----------------------------------------
            .        explicit
            .        _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
            .  	: _M_comp(std::move(__comp._M_comp))
            .        { }
            .  #endif
            .  
            .        template<typename _Iterator, typename _Value>
            .  	bool
  513,343,056  	operator()(_Iterator __it, _Value& __val)
  513,343,056  	{ return bool(_M_comp(*__it, __val)); }
            .      };
            .  
            .    template<typename _Compare>
            .     inline _Iter_comp_val<_Compare>
            .      __iter_comp_val(_Compare __comp)
            .      { return _Iter_comp_val<_Compare>(_GLIBCXX_MOVE(__comp)); }
            .  
            .    template<typename _Compare>
-- line 185 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/lib/gcc/x86_64-linux-gnu/9/include/xmmintrin.h
--------------------------------------------------------------------------------
Ir            

-- line 46 ----------------------------------------
            .  };
            .  
            .  /* Loads one cache line from address P to a location "closer" to the
            .     processor.  The selector I specifies the type of prefetch operation.  */
            .  #ifdef __OPTIMIZE__
            .  extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
            .  _mm_prefetch (const void *__P, enum _mm_hint __I)
            .  {
2,633,293,003    __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
            .  }
            .  #else
            .  #define _mm_prefetch(P, I) \
            .    __builtin_prefetch ((P), ((I & 0x4) >> 2), (I & 0x3))
            .  #endif
            .  
            .  #ifndef __SSE__
            .  #pragma GCC push_options
-- line 62 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /build/glibc-SzIz7B/glibc-2.31/malloc/malloc.c
  /build/glibc-SzIz7B/glibc-2.31/time/../sysdeps/unix/sysv/linux/clock_gettime.c

--------------------------------------------------------------------------------
Ir              
--------------------------------------------------------------------------------
116,293,819,401  events annotated

